# Installs Canonical MicroK8s on Ubuntu 24.04+ hosts via snap and prepares kubeconfig for download.
- name: Install MicroK8s
  hosts: all
  gather_facts: true
  become: true

  vars:
    microk8s_channel: "1.30/stable"
    ansible_python_interpreter: /usr/bin/python3
    local_python_interpreter: "{{ playbook_dir ~ '/../../.venv/bin/python' }}"

  pre_tasks:
    - name: Ensure target is Ubuntu 24.04 or newer
      ansible.builtin.assert:
        that:
          - ansible_distribution == "Ubuntu"
          - ansible_distribution_version is version('24.04', '>=')
        fail_msg: "MicroK8s installation supported only on Ubuntu Server 24.04 or newer"

  tasks:
    - name: Ensure snapd is installed
      ansible.builtin.apt:
        name: snapd
        state: present
        update_cache: true

    - name: Check if MicroK8s is installed
      ansible.builtin.command: snap list microk8s
      register: microk8s_list
      failed_when: false
      changed_when: false

    - name: Install MicroK8s snap
      ansible.builtin.command:
        cmd: "snap install microk8s --classic --channel={{ microk8s_channel }}"
      when: microk8s_list.rc != 0

    - name: Refresh MicroK8s to desired channel
      ansible.builtin.command:
        cmd: "snap refresh microk8s --channel={{ microk8s_channel }}"
      when: microk8s_list.rc == 0

    - name: Ensure MicroK8s group exists
      ansible.builtin.group:
        name: microk8s
        state: present

    - name: Ensure {{ ansible_user }} is in microk8s group
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: microk8s
        append: true

    - name: Wait for MicroK8s API to become ready
      ansible.builtin.command: microk8s status --wait-ready --timeout 600
      register: microk8s_status
      changed_when: false

    - name: Generate MicroK8s kubeconfig
      ansible.builtin.command: microk8s config
      register: microk8s_config
      changed_when: false

    - name: Parse kubeconfig YAML
      ansible.builtin.set_fact:
        kubeconfig_data: "{{ microk8s_config.stdout | from_yaml }}"

    - name: Save k8s-config to Azure Key Vault
      azure.azcollection.azure_rm_keyvaultsecret:
        secret_name: k8s-config
        secret_value: "{{ microk8s_config.stdout }}"
        keyvault_uri: "https://{{ azure_key_vault_name }}.vault.azure.net"
        subscription_id: "{{ azure_subscription_id }}"
      delegate_to: localhost
      become: false
      vars:
        ansible_python_interpreter: "{{ local_python_interpreter }}"

    - name: Save k8s-host to Azure Key Vault
      azure.azcollection.azure_rm_keyvaultsecret:
        secret_name: k8s-host
        secret_value: "{{ kubeconfig_data.clusters[0].cluster.server }}"
        keyvault_uri: "https://{{ azure_key_vault_name }}.vault.azure.net"
        subscription_id: "{{ azure_subscription_id }}"
      delegate_to: localhost
      become: false
      vars:
        ansible_python_interpreter: "{{ local_python_interpreter }}"

    - name: Save k8s-client-certificate to Azure Key Vault
      azure.azcollection.azure_rm_keyvaultsecret:
        secret_name: k8s-client-certificate
        secret_value: "{{ kubeconfig_data.users[0].user['client-certificate-data'] | ansible.builtin.b64decode }}"
        keyvault_uri: "https://{{ azure_key_vault_name }}.vault.azure.net"
        subscription_id: "{{ azure_subscription_id }}"
      delegate_to: localhost
      become: false
      vars:
        ansible_python_interpreter: "{{ local_python_interpreter }}"

    - name: Save k8s-client-key to Azure Key Vault
      azure.azcollection.azure_rm_keyvaultsecret:
        secret_name: k8s-client-key
        secret_value: "{{ kubeconfig_data.users[0].user['client-key-data'] | ansible.builtin.b64decode }}"
        keyvault_uri: "https://{{ azure_key_vault_name }}.vault.azure.net"
        subscription_id: "{{ azure_subscription_id }}"
      delegate_to: localhost
      become: false
      vars:
        ansible_python_interpreter: "{{ local_python_interpreter }}"

    - name: Save k8s-cluster-ca-certificate to Azure Key Vault
      azure.azcollection.azure_rm_keyvaultsecret:
        secret_name: k8s-cluster-ca-certificate
        secret_value: "{{ kubeconfig_data.clusters[0].cluster['certificate-authority-data'] | ansible.builtin.b64decode }}"
        keyvault_uri: "https://{{ azure_key_vault_name }}.vault.azure.net"
        subscription_id: "{{ azure_subscription_id }}"
      delegate_to: localhost
      become: false
      vars:
        ansible_python_interpreter: "{{ local_python_interpreter }}"
